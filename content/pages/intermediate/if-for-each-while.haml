Date: 23 August 2013
Categories: intermediate, guides, adam-stacoviak
Author: Adam Stacoviak
Summary: To write mixins and functions you Sass's control directives, @if @for @each and @while need to be among the first items on your list to learn about Sass. Control directives give your mixins flow and logic and can give you a finite level of decision making required by mixins.

%h1 Sass control directives: @if, @for, @each and @while

:markdown
  [Sass control directives](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#control_directives) are the cornerstone of creating libraries for reuse and distribution. Sass control directives @if, @for, @each and @while need to be among the first items on your list of things to learn when taking your Sass skills to the next level.

  ## Crash course to Sass control directives
  
  Sass control directives provide flow and logic and give you a finite level of decision making required by mixins and functions.
  
  ### @if

  `@if` - Wui officia deserunt mollit anim id est laborum.

      :::sass
      $boolean: true !default

      =if
        @if $boolean
          @warn "$boolean is true"
          display: block
        @else
          @warn "$boolean is false"
          display: none
      
      .if
        +if

  Which emits this CSS:

      :::css
      .if {
        display: block;
      }
  
  ### @for

  `@for` - Wui officia deserunt mollit anim id est laborum.

      :::sass
      $class-slug: for !default

      @for $i from 1 through 10
        .\#{$class-slug}-\#{$i}
          width: 60px + $i

  Which emits this CSS:

      :::css
      .for-1 {
        width: 61px;
      }

      .for-2 {
        width: 62px;
      }

      .for-3 {
        width: 63px;
      }

      .for-4 {
        width: 64px;
      }
  
  ### @each

  `@each` - Wui officia deserunt mollit anim id est laborum.

      :::sass
      $list: adam john wynn mason kuroir

      =author-images
        @each $author in $list
          .photo-\#{$author}
            background: image-url("avatars/\#{$author}.png") no-repeat

      .author-bio
        +author-images

  Which emits this CSS:

      :::css
      .author-bio .photo-adam {
        background: url('/images/avatars/adam.png') no-repeat;
      }
      .author-bio .photo-john {
        background: url('/images/avatars/john.png') no-repeat;
      }
      .author-bio .photo-wynn {
        background: url('/images/avatars/wynn.png') no-repeat;
      }
      .author-bio .photo-mason {
        background: url('/images/avatars/mason.png') no-repeat;
      }
      .author-bio .photo-kuroir {
        background: url('/images/avatars/kuroir.png') no-repeat;
      }
  
  ### @while

  `@while` - Wui officia deserunt mollit anim id est laborum.

      :sass
      $types: 10
      $type-width: 20px

      @while $types > 0
        .while-#{$types}
          width: $type-width + $types
        $types: $types - 1

  Which emits this CSS:

      :::css
      .while-4 {
        width: 24px;
      }

      .while-3 {
        width: 23px;
      }

      .while-2 {
        width: 22px;
      }

      .while-1 {
        width: 21px;
      }

  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.