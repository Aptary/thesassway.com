Date: 3 August 2050
Categories: advanced, guides, john-w-long
Author: John W. Long
about_author: john_w_long

# Modular CSS naming conventions

The more you write your own stylesheets, the more you will value using good
names in your code. Rather than making up my own names I sometimes consult a
pattern library like [Pears](http://pea.rs/) or a framework like
[Bootstrap](http://getbootstrap.com/) to find a good name for a concept.

Naming conventions can help us here as well. They provide an orderly structure
for our names. Naming conventions for classes are the major part of what a
methodology like [SMACSS](http://smacss.com/) or [BEM](http://bem.info/)
provides.

In this article I'd like to talk about a couple of my own naming conventions.
These are mostly based on SMACSS and BEM, but have my own twist.


## Learning to think in Objects

Modular CSS is all about learning to think about your CSS in terms of objects.
You could call these objects _modules_ (like SMACSS does), but I prefer to call
them _objects_ in Sass because we often use the term _module_ to refer to [a
library of mixins and
functions](http://thesassway.com/intermediate/a-standard-module-definition-for-sass).

Objects are small little chunks of functionality. You can think of them as
interface elements like headers, footers, buttons, and content areas.

I like to define my objects using only class selectors. ID and tag selectors can
often complicate things because of CSS specificity so I avoid them.

Here's an example of a button object in Sass:

    :::scss
    .button {
      background: linear-gradient(#eee, #ddd);
      border: 1px solid #999;
      @include border-radius(5px);
      color: #666;
      padding: 8px 15px;

      &:hover {
        background: linear-gradient(#fff, #eee);
        color: #111;
      }
    }

The Sass [ampersand operator](http://thesassway.com/intermediate/referencing-parent-selectors-using-ampersand)
makes it easy to define different states for an object. In this case I defined a
hover state for the button above.


## Parent-Child relationships

Adopting a naming convention for parent-child relationships between objects can
really help clean up your CSS. I talked about this in my earlier article on [the
advantages of avoiding nesting](http://thesassway.com/intermediate/avoid-nested-selectors-for-more-modular-css)
in Sass. The chief advantage is that it frees you up from having to think of
unique names for child objects to avoid namespace collisions with similar types
of objects.

Here's the example from my earlier article:

    :::scss
    .post {
      margin: 2em;

      .title {
        font-size: 2em;
        font-weight: normal;
      }
    }

    .summary {
      margin: 2em;

      .title {
        font-size: 1.2em;
        font-wieght: bold;
      }
    }

Instead of nesting objects underneath each other, remove the nesting and use
more specific class names:

    :::scss
    // Posts
    .post {
      margin: 2em 0;
    }
    .post-title {
      font-size: 2em;
      font-weight: normal;
    }

    // Summaries
    .summary {
      margin: 1em 0;
    }
    .summary-title {
      font-size: 1.2em;
      font-weight: bold;
    }

This is our fist naming convention. Parent-child relationships can be defined by
listing the parent object in the name of the child object. In fact, you can take
this a bit farther and have parent-child-grandchild relationships as well.

Here's a more advanced example of the parent-child naming convention showing
markup for an iOS-style tableview:

<div data-height="372" data-theme-id="0" data-slug-hash="KJjCL" data-user="jlong" data-default-tab="html" class="codepen"></div><script async src="http://codepen.io/assets/embed/ei.js"></script>


## Subclassing objects





